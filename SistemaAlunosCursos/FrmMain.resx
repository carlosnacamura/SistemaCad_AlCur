<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAzYHUANSVtQDMftcAy3vcAMl44QDHdeYAwGj6AMZz6QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADVj7wAz4PQANSMwQDSiMYA0IbLAP/oKADKet8EyHfkBP//AADGc+oAxHDvAMNu8wDIduUAwmz1AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADbmasA2ZWxANmWsADYk7UA1IzBDtKIxkHQhM11zYHTlct92qHJeeChyHbllsZz6nfEcO9Cw23zD8Nt
        9ADBavgAwmv3AMFp+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA36CfANWPvADcnKcA2ZaxDNeTtmDVjr2t04rEpdCGy3bOgtJPzH7YPcp63j3Id+RPxnPpdsVx
        7qbDbvKvwmz1Y8Fq+Q3BavkAzoTSAMBo+wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        4P//gAH//+AH//////////////////////8=
</value>
  </data>
</root>